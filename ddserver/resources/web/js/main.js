// Generated by CoffeeScript 1.6.3
/*
Copyright 2014 Sven Reissmann <sven@0x80.io>

This file is part of ddserver. It is licensed under the terms of the GNU
Affero General Public License version 3. See <http://www.gnu.org/licenses/>.
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require.config({
    urlArgs: 'v=' + new Date(),
    baseUrl: '/static/js',
    paths: {
      jquery: 'lib/jquery.min',
      knockout: 'lib/knockout',
      pager: 'lib/pager.min',
      bootstrap: 'lib/bootstrap.min',
      pwstrength: 'lib/pwstrength',
      chart: 'lib/chart.min',
      text: 'lib/text',
      vars: 'vars'
    },
    shim: {
      'bootstrap': {
        deps: ['jquery']
      }
    }
  });

  this.requireVM = function(module) {
    return function(callback) {
      return require(["/static/pages/" + module + "/model.js"], function(vm) {
        return callback(new vm);
      });
    };
  };

  this.requireHTML = function(module) {
    return function(page, callback) {
      return require(["text!/static/pages/" + module + "/view.html"], function(html) {
        $(page.element).html(html);
        return callback();
      });
    };
  };

  require(['jquery', 'knockout', 'pager', 'bootstrap'], function($, ko, pager) {
    var VM, vm;
    VM = (function() {
      function VM() {
        this.isLoggedIn = __bind(this.isLoggedIn, this);
        this.username = ko.observable("");
        this.password = ko.observable("");
        this.authorized = ko.observable(false);
        $.ajaxSetup({
          beforeSend: function(xhr) {
            return xhr.setRequestHeader('Authorization', "Basic " + (btoa(this.username + ":" + this.password)));
          }
        });
      }

      VM.prototype.isLoggedIn = function(page, route, callback) {
        var _this = this;
        return $.ajax({
          url: '/_auth/getlogin',
          dataType: 'json',
          success: function(result) {
            if (result.success === true) {
              _this.username(result.username);
              return callback();
            } else {
              return window.location.href = "/#system/login";
            }
          },
          error: function(jqXHR, status, error) {
            _this.error(error);
            return window.location.href = "/#system/login";
          }
        });
      };

      VM.prototype.login = function() {
        var _this = this;
        console.log("LALA");
        return $.ajax({
          url: '/api/v1/profile',
          dataType: 'json',
          success: function(result) {
            console.log("OK");
            return _this.authorized(true);
          }
        });
      };

      VM.prototype.logout = function() {
        var _this = this;
        return $.ajax({
          url: '/_auth/logout',
          dataType: 'json',
          success: function(result) {
            return window.location.href = "/";
          }
        });
      };

      return VM;

    })();
    vm = new VM;
    pager.extendWithPage(vm);
    ko.applyBindings(vm);
    pager.onBindingError.add(function(event) {
      var page;
      console.log(event);
      page = event.page;
      return $(page.element).empty().append('<div class="text-danger"> Error Loading Page</div>');
    });
    return pager.start();
  });

}).call(this);
